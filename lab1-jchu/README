This is a skeleton for CS 111 Lab 1.

Eileen The 104141878
Jonathan Chu804141479 


Our solution uses a linked list to store the seperate
commands.  Each node could potentially be run in parallel,
if the node before and after it are not conflicting.  Each
of the nodes also has a pointer to a command object, which is
the root command.

The current limitations is that there is some memory reallocation
that doesn't work correctly, but so long as it doesn't go 
over 50 bytes it shouldn't be a problem.

Time Travel has been implemented, but it is difficult to test.

The dependency graph effectively has 2 arrays: one with dependencies,
and one without.  When run in time travel, it creates the dependencygraph,
and doesn't run the regular "read command execute command" code.  Instead,
it seperates the nodes into those with dependencies and those without.
The ones with dependencies will wait for the dependencies to resolve, while
the no dependency nodes will just execute in parallel.  It seems to work for
the test cases we presented, so that's nice.
